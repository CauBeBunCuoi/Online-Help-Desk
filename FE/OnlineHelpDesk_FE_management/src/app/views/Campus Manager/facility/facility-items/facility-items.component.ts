import { Component, OnInit, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TableModule } from 'primeng/table';
import { TagModule } from 'primeng/tag';
import { ConfirmationService, MessageService } from 'primeng/api';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import { ToastModule } from 'primeng/toast';
import { ButtonModule } from 'primeng/button';
import { Dialog } from 'primeng/dialog';
import { InputTextModule } from 'primeng/inputtext';
import { AvatarModule } from 'primeng/avatar';
import { IconFieldModule } from 'primeng/iconfield';
import { InputIconModule } from 'primeng/inputicon';
import { HttpClientModule } from '@angular/common/http';
import { MultiSelectModule } from 'primeng/multiselect';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { InputNumberModule } from 'primeng/inputnumber';

import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { FileUpload, FileUploadModule } from 'primeng/fileupload';
import { FacilityMajorService } from '../../../../core/service/facility-major.service';
import { FacilityItemService } from '../../../../core/service/facility-item.service';

@Component({
  selector: 'app-facility-items',
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TableModule,
    TagModule,
    ConfirmDialogModule,
    ToastModule,
    ButtonModule,
    Dialog,
    InputTextModule,
    AvatarModule,
    IconFieldModule,
    InputIconModule,
    MultiSelectModule,
    HttpClientModule,
    FileUploadModule,
    InputNumberModule,
  ],
  templateUrl: './facility-items.component.html',
  styleUrl: './facility-items.component.scss',
  providers: [ConfirmationService, MessageService],
})
export class FacilityItemsComponent implements OnInit {
  facilityItems!: any[];

  selectedFacilityItemId: number | null = null;

  facilityMajors: any[] = [];
  selectedFacilityMajors: any[] = []; // L∆∞u FacilityMajor ƒë∆∞·ª£c ch·ªçn

  amount: number = 0; // S·ªë l∆∞·ª£ng nh·∫≠p v√†o
  count: number = 0; // T·ªïng s·ªë kh·∫£ d·ª•ng
  remainingAmount: number = 0; // S·ªë l∆∞·ª£ng c√≤n l·∫°i c√≥ th·ªÉ ch·ªçn

  addFacilityItemForm: FormGroup;
  add: boolean = false;
  @ViewChild('fileUploadRef') fileUpload!: FileUpload;
  imageUrl: string | null = null;

  // updateStaffForm: FormGroup
  update: boolean = false;

  facilityMajorTable: boolean = false;

  loading: boolean = false;
  activityValues: number[] = [0, 100];

  constructor(
    private facilityItemService: FacilityItemService,
    private facilityMajorService: FacilityMajorService,
    private confirmationService: ConfirmationService, private messageService: MessageService,
    private fb: FormBuilder
  ) {
    this.addFacilityItemForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(3)]], // T√™n Facility Item
      count: [0, [Validators.required, Validators.min(1)]], // S·ªë l∆∞·ª£ng (√≠t nh·∫•t 1)
      image: [''], // ·∫¢nh d·∫°ng Base64 ho·∫∑c URL
    });

  }

  ngOnInit() {
    this.facilityItemService.getFacilityItems().then((data) => {
      this.facilityItems = data;
    });
    this.facilityMajorService.getFacilityMajors().then(data => {
      this.facilityMajors = data;
    });
  }

  onGlobalFilter(event: Event, dt: any) {
    const inputElement = event.target as HTMLInputElement;
    dt.filterGlobal(inputElement?.value, 'contains');
  }

  confirmDelete(event: Event) {
    this.confirmationService.confirm({
      target: event.target as EventTarget,
      message: 'Do you want to delete this record?',
      header: 'Danger Zone',
      icon: 'pi pi-info-circle',
      rejectLabel: 'Cancel',
      rejectButtonProps: {
        label: 'Cancel',
        severity: 'secondary',
        outlined: true,
      },
      acceptButtonProps: {
        label: 'Delete',
        severity: 'danger',
      },

      accept: () => {
        this.messageService.add({ severity: 'info', summary: 'Confirmed', detail: 'Record deleted' });
      },
      reject: () => {
        this.messageService.add({ severity: 'error', summary: 'Rejected', detail: 'You have rejected' });
      },
    });
  }

  showDialogAdd() {
    this.add = true;
  }

  showDialogUpdate(id: number) {
    this.update = true; // M·ªü dialog

    // üî• G·ªçi API l·∫•y th√¥ng tin FacilityItem
    this.facilityItemService.findById(id).then(item => {
      if (item) {
        this.addFacilityItemForm.patchValue({
          name: item.name,
          count: item.count,
          image: item.image || null, // N·∫øu c√≥ ·∫£nh, load ·∫£nh
        });

        this.imageUrl = item.image || null; // C·∫≠p nh·∫≠t ·∫£nh hi·ªÉn th·ªã
      }
    });
  }

  hideDialogAdd() {
    this.addFacilityItemForm.reset();
    this.imageUrl = null; // X√≥a ·∫£nh hi·ªÉn th·ªã

    // üî• Reset PrimeNG FileUpload
    setTimeout(() => {
      if (this.fileUpload) {
        this.fileUpload.clear(); // Reset fileUpload v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
      }
    }, 100);

    this.add = false;
  }

  hideDialogUpdate() {
    this.addFacilityItemForm.reset(); // Reset form
    this.imageUrl = null; // X√≥a ·∫£nh hi·ªÉn th·ªã

    // üî• Reset PrimeNG FileUpload
    setTimeout(() => {
      if (this.fileUpload) {
        this.fileUpload.clear(); // Reset fileUpload v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
      }
    }, 100);

    this.update = false; // ƒê√≥ng dialog
  }


  onFileSelect(event: any) {
    const file = event.files[0]; // L·∫•y file ƒë·∫ßu ti√™n
    if (file) {
      const reader = new FileReader();
      reader.onload = (e: any) => {
        this.imageUrl = e.target.result; // Hi·ªÉn th·ªã ·∫£nh tr∆∞·ªõc
        this.addFacilityItemForm.patchValue({ image: e.target.result }); // G√°n v√†o FormGroup
      };
      reader.readAsDataURL(file);
    }
  }

  addFacilityItem() {
    if (this.addFacilityItemForm.valid) {
      console.log('Form Data:', this.addFacilityItemForm.value); // G·ª≠i l√™n API
      this.hideDialogAdd();
    } else {
      console.log('Form Invalid');
      this.addFacilityItemForm.markAllAsTouched();
    }
  }

  updateFacilityItem() {
    if (this.addFacilityItemForm.valid) {
      console.log('Form update Data:', this.addFacilityItemForm.value); // G·ª≠i l√™n API
      this.hideDialogUpdate();
    } else {
      console.log('Form update Invalid');
      this.addFacilityItemForm.markAllAsTouched();
    }
  }



  // ‚úÖ M·ªü dialog v·ªõi s·ªë l∆∞·ª£ng t·ªëi ƒëa (count)
  showDialogFacilityMajorTable(id: number, count: number) {
    this.selectedFacilityItemId = id;
    this.count = count; // T·ªïng s·ªë kh·∫£ d·ª•ng
    this.amount = 0; // Reset s·ªë l∆∞·ª£ng nh·∫≠p
    this.remainingAmount = count; // Reset s·ªë l∆∞·ª£ng c√≥ th·ªÉ ch·ªçn
    this.selectedFacilityMajors = []; // Reset danh s√°ch ƒë√£ ch·ªçn
    this.facilityMajorTable = true;
  }

  // ‚úÖ Khi ng∆∞·ªùi d√πng nh·∫≠p s·ªë l∆∞·ª£ng
  onAmountInput() {
    if (this.amount > this.count) {
      this.amount = this.count; // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng nh·∫≠p kh√¥ng l·ªõn h∆°n `count`
    }
    this.remainingAmount = this.count; // Reset l·∫°i s·ªë l∆∞·ª£ng kh·∫£ d·ª•ng
  }

  // ‚úÖ Khi ch·ªçn `FacilityMajor`
  onFacilityMajorSelect(event: any) {
    if (this.amount <= this.remainingAmount) {
      this.remainingAmount -= this.amount
    } else {
      // ‚ùå N·∫øu kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng, b·ªè ch·ªçn ngay l·∫≠p t·ª©c
      const index = this.selectedFacilityMajors.indexOf(event);
      if (index !== -1) {
        this.selectedFacilityMajors.splice(index, 1);
      }
    }
  }

  // ‚úÖ Khi b·ªè ch·ªçn `FacilityMajor`
  onFacilityMajorUnselect(event: any) {
    this.remainingAmount += this.amount; // TƒÉng l·∫°i s·ªë l∆∞·ª£ng c√≤n l·∫°i
  }

  hideDialogFacilityMajorTable() {
    this.facilityMajorTable = false;
    this.selectedFacilityItemId = null;
    this.selectedFacilityMajors = []; // üî• Reset danh s√°ch ƒë√£ ch·ªçn
    this.count = 0; // üî• Reset amount
  }

  updateFacilityMajorSelect() {
    if (!this.selectedFacilityItemId) {
      console.warn('No account selected.');
      return;
    }

    if (this.selectedFacilityMajors.length === 0) {
      console.warn('No FacilityMajor selected.');
      return;
    }

    const formData = new FormData();
    formData.append('accountId', this.selectedFacilityItemId.toString()); // Th√™m ID ng∆∞·ªùi d√πng
    formData.append('amount', this.amount.toString()); // Th√™m m√¥ t·∫£ c√¥ng vi·ªác

    this.selectedFacilityMajors.forEach(fm => {
      formData.append('facilityMajorsId', fm.id.toString());
    });

    console.log('FormData Values:');
    formData.forEach((value, key) => {
      console.log(`${key}:`, value);
    });
    console.log('FacilityMajors ID:', formData.getAll('facilityMajorsId'));

  }

}
